{
  "plugins": [
    "react",
    "prettier"
  ],
  "env": {
    "node": true,
    "es6": true,
    "browser": false
  },
  "parserOptions": {
    "ecmaVersion": 8,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true,
      "objectLiteralComputedProperties": true
    }
  },
  "rules": {
    'prettier/prettier': "error",
    // Section Possible Errors
    // These rules relate to possible syntax or logic errors in JavaScript code:
		'no-await-in-loop': [
      0
    ], // disallow await inside of loops
		'no-cond-assign': [
      "error",
      "except-parens"
    ], // disallow assignment operators in conditional expressions
		'no-console': [
      "error"
    ], // disallow the use of console
		'no-constant-condition': [
      "error"
    ], // disallow constant expressions in conditions
		'no-control-regex': [
      "error"
    ], // disallow control characters in regular expressions
		'no-debugger': [
      "error"
    ], // disallow the use of debugger
		'no-dupe-args': [
      "error"
    ], // disallow duplicate arguments in function definitions
		'no-dupe-keys': [
      "error"
    ], // disallow duplicate keys in object literals
		'no-duplicate-case': [
      "error"
    ], // disallow duplicate case labels
		'no-empty-character-class': [
      "error"
    ], // disallow empty character classes in regular expressions
		'no-empty': [
      "error",
      {
        "allowEmptyCatch": true
      }
    ], // disallow empty block statements
		'no-ex-assign': [
      "error"
    ], // disallow reassigning exceptions in catch clauses
		'no-extra-boolean-cast': [
      "error"
    ], // disallow unnecessary boolean casts
		'no-extra-parens': [
      0
    ], // disallow unnecessary parentheses
		'no-extra-semi': [
      "error"
    ], // disallow unnecessary semicolons
		'no-func-assign': [
      "error"
    ], // disallow reassigning function declarations
		'no-inner-declarations': [
      "error"
    ], // disallow variable or function declarations in nested blocks
		'no-invalid-regexp': [
      "error"
    ], // disallow invalid regular expression strings in RegExp constructors
		'no-irregular-whitespace': [
      "error"
    ], // disallow irregular whitespace outside of strings and comments
		'no-obj-calls': [
      "error"
    ], // disallow calling global object properties as functions
		'no-prototype-builtins': [
      "error"
    ], // disallow calling some Object.prototype methods directly on objects
		'no-regex-spaces': [
      "error"
    ], // disallow multiple spaces in regular expressions
		'no-sparse-arrays': [
      "error"
    ], // disallow sparse arrays
		'no-template-curly-in-string': [
      "error"
    ], // disallow template literal placeholder syntax in regular strings
		'no-unexpected-multiline': [
      "error"
    ], // disallow confusing multiline expressions
		'no-unreachable': [
      "error"
    ], // disallow unreachable code after return, throw, continue, and break statements
		'no-unsafe-finally': [
      "error"
    ], // disallow control flow statements in finally blocks
		'no-unsafe-negation': [
      "error"
    ], // disallow negating the left operand of relational operators
		'use-isnan': [
      "error"
    ], // require calls to isNaN() when checking for NaN
		'valid-jsdoc': [
      0
    ], // enforce valid JSDoc comments
		'valid-typeof': [
      "error"
    ], // enforce comparing typeof expressions against valid strings
    // Section Best Practices
    // These rules relate to better ways of doing things to help you avoid problems:
		'accessor-pairs': [
      "error"
    ], // enforce getter and setter pairs in objects
		'array-callback-return': [
      "error"
    ], // enforce return statements in callbacks of array methods
		'block-scoped-var': [
      "error"
    ], // enforce the use of variables within the scope they are defined
		'class-methods-use-this': [
      "error"
    ], // enforce that class methods utilize this
		'complexity': [
      0
    ], // enforce a maximum cyclomatic complexity allowed in a program
		'consistent-return': [
      0
    ], // require return statements to either always or never specify values
		'curly': [
      "error"
    ], // enforce consistent brace style for all control statements
		'default-case': [
      "error"
    ], // require default cases in switch statements
		'dot-location': [
      "error",
      "property"
    ], // enforce consistent newlines before and after dots
		'dot-notation': [
      "error"
    ], // enforce dot notation whenever possible
		'eqeqeq': [
      "error"
    ], // require the use of === and !==
		'guard-for-in': [
      "error"
    ], // require for-in loops to include an if statement
		'no-alert': [
      "error"
    ], // disallow the use of alert, confirm, and prompt
		'no-caller': [
      "error"
    ], // disallow the use of arguments.caller or arguments.callee
		'no-case-declarations': [
      0
    ], // disallow lexical declarations in case clauses
		'no-div-regex': [
      "error"
    ], // disallow division operators explicitly at the beginning of regular expressions
		'no-else-return': [
      "error"
    ], // disallow else blocks after return statements in if statements
		'no-empty-function': [
      "error"
    ], // disallow empty functions
		'no-empty-pattern': [
      "error"
    ], // disallow empty destructuring patterns
		'no-eq-null': [
      0
    ], // disallow null comparisons without type-checking operators
		'no-eval': [
      "error"
    ], // disallow the use of eval()
		'no-extend-native': [
      "error"
    ], // disallow extending native types
		'no-extra-bind': [
      "error"
    ], // disallow unnecessary calls to .bind()
		'no-extra-label': [
      "error"
    ], // disallow unnecessary labels
		'no-fallthrough': [
      "error",
      {
        "commentPattern": "eslint-exception"
      }
    ], // disallow fallthrough of case statements
		'no-floating-decimal': [
      "error"
    ], // disallow leading or trailing decimal points in numeric literals
		'no-global-assign': [
      "error"
    ], // disallow assignments to native objects or read-only global variables
		'no-implicit-coercion': [
      0
    ], // disallow shorthand type conversions
		'no-implicit-globals': [
      "error"
    ], // disallow variable and function declarations in the global scope
		'no-implied-eval': [
      "error"
    ], // disallow the use of eval()-like methods
		'no-invalid-this': [
      0
    ], // disallow this keywords outside of classes or class-like objects
		'no-iterator': [
      "error"
    ], // disallow the use of the __iterator__ property
		'no-labels': [
      "error"
    ], // disallow labeled statements
		'no-lone-blocks': [
      "error"
    ], // disallow unnecessary nested blocks
		'no-loop-func': [
      "error"
    ], // disallow function declarations and expressions inside loop statements
		'no-magic-numbers': [
      0
    ], // disallow magic numbers
		'no-multi-spaces': [
      "error"
    ], // disallow multiple spaces
		'no-multi-str': [
      "error"
    ], // disallow multiline strings
		'no-new-func': [
      "error"
    ], // disallow new operators with the Function object
		'no-new-wrappers': [
      "error"
    ], // disallow new operators with the String, Number, and Boolean objects
		'no-new': [
      "error"
    ], // disallow new operators outside of assignments or comparisons
		'no-octal-escape': [
      "error"
    ], // disallow octal escape sequences in string literals
		'no-octal': [
      "error"
    ], // disallow octal literals
		'no-param-reassign': [
      "error"
    ], // disallow reassigning function parameters
		'no-proto': [
      "error"
    ], // disallow the use of the __proto__ property
		'no-redeclare': [
      "error"
    ], // disallow variable redeclaration
		'no-restricted-properties': [
      0
    ], // disallow certain properties on certain objects
		'no-return-assign': [
      "error"
    ], // disallow assignment operators in return statements
		'no-return-await': [
      "error"
    ], // disallow unnecessary return await
		'no-script-url': [
      "error"
    ], // disallow javascript: urls
		'no-self-assign': [
      "error"
    ], // disallow assignments where both sides are exactly the same
		'no-self-compare': [
      "error"
    ], // disallow comparisons where both sides are exactly the same
		'no-sequences': [
      "error"
    ], // disallow comma operators
		'no-throw-literal': [
      "error"
    ], // disallow throwing literals as exceptions
		'no-unmodified-loop-condition': [
      "error"
    ], // disallow unmodified loop conditions
		'no-unused-expressions': [
      "error"
    ], // disallow unused expressions
		'no-unused-labels': [
      "error"
    ], // disallow unused labels
		'no-useless-call': [
      "error"
    ], // disallow unnecessary calls to .call() and .apply()
		'no-useless-concat': [
      "error"
    ], // disallow unnecessary concatenation of literals or template literals
		'no-useless-escape': [
      "error"
    ], // disallow unnecessary escape characters
		'no-useless-return': [
      0
    ], // disallow redundant return statements
		'no-void': [
      "error"
    ], // disallow void operators
		'no-warning-comments': [
      0
    ], // disallow specified warning terms in comments
		'no-with': [
      "error"
    ], // disallow with statements
		'radix': [
      "error"
    ], // enforce the consistent use of the radix argument when using parseInt()
		'require-await': [
      "error"
    ], // disallow async functions which have no await expression
		'vars-on-top': [
      "error"
    ], // require var declarations be placed at the top of their containing scope
		'wrap-iife': [
      "error"
    ], // require parentheses around immediate function invocations
		'yoda': [
      0
    ], // require or disallow “Yoda” conditions
    // Section Strict Mode
    // These rules relate to strict mode directives:
		'strict': [
      0
    ], // require or disallow strict mode directives
    // Section Variables
    // These rules relate to variable declarations:
		'init-declarations': [
      0
    ], // require or disallow initialization in variable declarations
		'no-catch-shadow': [
      "error"
    ], // disallow catch clause parameters from shadowing variables in the outer scope
		'no-delete-var': [
      "error"
    ], // disallow deleting variables
		'no-label-var': [
      "error"
    ], // disallow labels that share a name with a variable
		'no-restricted-globals': [
      0
    ], // disallow specified global variables
		'no-shadow-restricted-names': [
      "error"
    ], // disallow identifiers from shadowing restricted names
		'no-shadow': [
      "error"
    ], // disallow variable declarations from shadowing variables declared in the outer scope
		'no-undef-init': [
      0
    ], // disallow initializing variables to undefined
		'no-undef': [
      "error"
    ], // disallow the use of undeclared variables unless mentioned in /*global */ comments
		'no-undefined': [
      "error"
    ], // disallow the use of undefined as an identifier
		'no-unused-vars': [
      "error"
    ], // disallow unused variables
		'no-use-before-define': [
      "error"
    ], // disallow the use of variables before they are defined
    // Section Node.js and CommonJS
    // These rules relate to code running in Node.js, or in browsers with CommonJS:
		'callback-return': [
      0
    ], // require return statements after callbacks
		'global-require': [
      0
    ], // require require() calls to be placed at top-level module scope
		'handle-callback-err': [
      0
    ], // require error handling in callbacks
		'no-mixed-requires': [
      0
    ], // disallow require calls to be mixed with regular variable declarations
		'no-new-require': [
      "error"
    ], // disallow new operators with calls to require
		'no-path-concat': [
      "error"
    ], // disallow string concatenation with __dirname and __filename
		'no-process-env': [
      0
    ], // disallow the use of process.env
		'no-process-exit': [
      0
    ], // disallow the use of process.exit()
		'no-restricted-modules': [
      0
    ], // disallow specified modules when loaded by require
		'no-sync': [
      0
    ], // disallow synchronous methods
    // Section Stylistic Issues
    // These rules relate to style guidelines, and are therefore quite subjective:
		'array-bracket-spacing': [
      "error",
      "never"
    ], // enforce consistent spacing inside array brackets
		'block-spacing': [
      "error",
      "always"
    ], // enforce consistent spacing inside single-line blocks
		'brace-style': [
      "error",
      "1tbs"
    ], // enforce consistent brace style for blocks
		'camelcase': [
      "error"
    ], // enforce camelcase naming convention
		'capitalized-comments': [
      0
    ], // enforce or disallow capitalization of the first letter of a comment
		'comma-dangle': [
      "error",
      "never"
    ], // require or disallow trailing commas
		'comma-spacing': [
      "error"
    ], // enforce consistent spacing before and after commas
		'comma-style': [
      "error"
    ], // enforce consistent comma style
		'computed-property-spacing': [
      "error",
      "never"
    ], // enforce consistent spacing inside computed property brackets
		'consistent-this': [
      "error",
      "_this"
    ], // enforce consistent naming when capturing the current execution context
		'eol-last': [
      0
    ], // require or disallow newline at the end of files
		'func-call-spacing': [
      "error",
      "never"
    ], // require or disallow spacing between function identifiers and their invocations
		'func-name-matching': [
      0
    ], // require function names to match the name of the variable or property to which they are assigned
		'func-names': [
      0
    ], // require or disallow named function expressions
		'func-style': [
      0
    ], // enforce the consistent use of either function declarations or expressions
		'id-blacklist': [
      0
    ], // disallow specified identifiers
		'id-length': [
      0
    ], // enforce minimum and maximum identifier lengths
		'id-match': [
      0
    ], // require identifiers to match a specified regular expression
		'indent': [
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ], // enforce consistent indentation
		'jsx-quotes': [
      "error",
      "prefer-double"
    ], // enforce the consistent use of either double or single quotes in JSX attributes
		'key-spacing': [
      "error",
      {
        "beforeColon": false,
        "afterColon": true
      }
    ], // enforce consistent spacing between keys and values in object literal properties
		'keyword-spacing': [
      "error",
      {
        "before": true,
        "after": false,
        "overrides": {
          "var": {
            "after": true
          },
          "let": {
            "after": true
          },
          "const": {
            "after": true
          },
          "yield": {
            "after": true
          },
          "case": {
            "after": true
          },
          "class": {
            "after": true
          },
          "delete": {
            "after": true
          },
          "do": {
            "after": true
          },
          "export": {
            "after": true
          },
          "extends": {
            "after": true
          },
          "finally": {
            "after": true
          },
          "from": {
            "after": true
          },
          "import": {
            "after": true
          },
          "instanceof": {
            "after": true
          },
          "new": {
            "after": true
          },
          "of": {
            "after": true
          },
          "return": {
            "after": true
          },
          "static": {
            "after": true
          },
          "else": {
            "after": true
          },
          "try": {
            "after": true
          }
        }
      }
    ], // enforce consistent spacing before and after keywords
		'line-comment-position': [
      0
    ], // enforce position of line comments
		'linebreak-style': [
      0
    ], // enforce consistent linebreak style
		'lines-around-comment': [
      0
    ], // require empty lines around comments
		'lines-around-directive': [
      "error",
      "always"
    ], // require or disallow newlines around directives
		'max-depth': [
      0
    ], // enforce a maximum depth that blocks can be nested
		'max-len': [
      0
    ], // enforce a maximum line length
		'max-lines': [
      0
    ], // enforce a maximum number of lines per file
		'max-nested-callbacks': [
      0
    ], // enforce a maximum depth that callbacks can be nested
		'max-params': [
      0
    ], // enforce a maximum number of parameters in function definitions
		'max-statements-per-line': [
      0
    ], // enforce a maximum number of statements allowed per line
		'max-statements': [
      0
    ], // enforce a maximum number of statements allowed in function blocks
		'multiline-ternary': [
      0
    ], // enforce newlines between operands of ternary expressions
		'new-cap': [
      "error"
    ], // require constructor names to begin with a capital letter
		'new-parens': [
      "error"
    ], // require parentheses when invoking a constructor with no arguments
		'newline-after-var': [
      "error"
    ], // require or disallow an empty line after variable declarations
		'newline-before-return': [
      "error"
    ], // require an empty line before return statements
		'newline-per-chained-call': [
      0
    ], // require a newline after each call in a method chain
		'no-array-constructor': [
      "error"
    ], // disallow Array constructors
		'no-bitwise': [
      0
    ], // disallow bitwise operators
		'no-continue': [
      0
    ], // disallow continue statements
		'no-inline-comments': [
      0
    ], // disallow inline comments after code
		'no-lonely-if': [
      "error"
    ], // disallow if statements as the only statement in else blocks
		'no-mixed-operators': [
      "error"
    ], // disallow mixed binary operators
		'no-mixed-spaces-and-tabs': [
      "error"
    ], // disallow mixed spaces and tabs for indentation
		'no-multiple-empty-lines': [
      "error"
    ], // disallow multiple empty lines
		'no-negated-condition': [
      0
    ], // disallow negated conditions
		'no-nested-ternary': [
      "error"
    ], // disallow nested ternary expressions
		'no-new-object': [
      "error"
    ], // disallow Object constructors
		'no-plusplus': [
      0
    ], // disallow the unary operators ++ and --
		'no-restricted-syntax': [
      0
    ], // disallow specified syntax
		'no-tabs': [
      "error"
    ], // disallow all tabs
		'no-ternary': [
      0
    ], // disallow ternary operators
		'no-trailing-spaces': [
      "error"
    ], // disallow trailing whitespace at the end of lines
		'no-underscore-dangle': [
      "error",
      {
        "allow": [
          "_this"
        ]
      }
    ], // disallow dangling underscores in identifiers
		'no-unneeded-ternary': [
      "error"
    ], // disallow ternary operators when simpler alternatives exist
		'no-whitespace-before-property': [
      "error"
    ], // disallow whitespace before properties
		'object-curly-newline': [
      0
    ], // enforce consistent line breaks inside braces
		'object-curly-spacing': [
      "error",
      "never"
    ], // enforce consistent spacing inside braces
		'object-property-newline': [
      0
    ], // enforce placing object properties on separate lines
		'one-var-declaration-per-line': [
      0
    ], // require or disallow newlines around variable declarations
		'one-var': [
      0
    ], // enforce variables to be declared either together or separately in functions
		'operator-assignment': [
      0
    ], // require or disallow assignment operator shorthand where possible
		'operator-linebreak': [
      "error",
      "after"
    ], // enforce consistent linebreak style for operators
		'padded-blocks': [
      "error",
      "never"
    ], // require or disallow padding within blocks
		'quote-props': [
      "error",
      "as-needed",
      {
        "keywords": true
      }
    ], // require quotes around object literal property names
		'quotes': [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ], // enforce the consistent use of either backticks, double, or single quotes
		'require-jsdoc': [
      0
    ], // require JSDoc comments
		'semi-spacing': [
      "error",
      {
        "before": false,
        "after": true
      }
    ], // enforce consistent spacing before and after semicolons
		'semi': [
      "error",
      "always"
    ], // require or disallow semicolons instead of ASI
		'sort-keys': [
      0
    ], // require object keys to be sorted
		'sort-vars': [
      0
    ], // require variables within the same declaration block to be sorted
		'space-before-blocks': [
      "error",
      "always"
    ], // enforce consistent spacing before blocks
		'space-before-function-paren': [
      "error",
      "never"
    ], // enforce consistent spacing before function definition opening parenthesis
		'space-in-parens': [
      "error",
      "never"
    ], // enforce consistent spacing inside parentheses
		'space-infix-ops': [
      "error"
    ], // require spacing around infix operators
		'space-unary-ops': [
      "error",
      {
        "words": true,
        "nonwords": false
      }
    ], // enforce consistent spacing before or after unary operators
		'spaced-comment': [
      0
    ], // enforce consistent spacing after the // or /* in a comment
		'unicode-bom': [
      0
    ], // require or disallow Unicode byte order mark (BOM)
		'wrap-regex': [
      0
    ], // require parenthesis around regex literals
    // Section ECMAScript 6
    // These rules relate to ES6, also known as ES2015:
		'arrow-body-style': [
      "error",
      "as-needed"
    ], // require braces around arrow function bodies
		'arrow-parens': [
      0
    ], // require parentheses around arrow function arguments
		'arrow-spacing': [
      "error",
      {
        "before": true,
        "after": true
      }
    ], // enforce consistent spacing before and after the arrow in arrow functions
		'constructor-super': [
      "error"
    ], // require super() calls in constructors
		'generator-star-spacing': [
      "error",
      {
        "before": true,
        "after": false
      }
    ], // enforce consistent spacing around * operators in generator functions
		'no-class-assign': [
      "error"
    ], // disallow reassigning class members
		'no-confusing-arrow': [
      "error",
      {
        "allowParens": true
      }
    ], // disallow arrow functions where they could be confused with comparisons
		'no-const-assign': [
      "error"
    ], // disallow reassigning const variables
		'no-dupe-class-members': [
      "error"
    ], // disallow duplicate class members
		'no-duplicate-imports': [
      "error"
    ], // disallow duplicate module imports
		'no-new-symbol': [
      "error"
    ], // disallow new operators with the Symbol object
		'no-restricted-imports': [
      0
    ], // disallow specified modules when loaded by import
		'no-this-before-super': [
      "error"
    ], // disallow this/super before calling super() in constructors
		'no-useless-computed-key': [
      "error"
    ], // disallow unnecessary computed property keys in object literals
		'no-useless-constructor': [
      "error"
    ], // disallow unnecessary constructors
		'no-useless-rename': [
      "error"
    ], // disallow renaming import, export, and destructured assignments to the same name
		'no-var': [
      0
    ], // require let or const instead of var
		'object-shorthand': [
      0
    ], // require or disallow method and property shorthand syntax for object literals
		'prefer-arrow-callback': [
      0
    ], // require arrow functions as callbacks
		'prefer-const': [
      "error"
    ], // require const declarations for variables that are never reassigned after declared
		'prefer-numeric-literals': [
      0
    ], // disallow parseInt() in favor of binary, octal, and hexadecimal literals
		'prefer-rest-params': [
      0
    ], // require rest parameters instead of arguments
		'prefer-spread': [
      0
    ], // require spread operators instead of .apply()
		'prefer-template': [
      0
    ], // require template literals instead of string concatenation
		'require-yield': [
      "error"
    ], // require generator functions to contain yield
		'rest-spread-spacing': [
      "error",
      "never"
    ], // enforce spacing between rest and spread operators and their expressions
		'sort-imports': [
      0
    ], // enforce sorted import declarations within modules
		'symbol-description': [
      0
    ], // require symbol descriptions
		'template-curly-spacing': [
      "error",
      "never"
    ], // require or disallow spacing around embedded expressions of template strings
		'yield-star-spacing': [
      "error",
      "before"
    ], // require or disallow spacing around the * in yield* expressions
    // REACT
		'react/display-name': [
      0
    ], // Prevent missing displayName in a React component definition
		'react/forbid-component-props': [
      0
    ], // Forbid certain props on Components
		'react/forbid-prop-types': [
      0
    ], // Forbid certain propTypes
		'react/no-array-index-key': [
      "error"
    ], // Prevent using Array index in key props
		'react/no-children-prop': [
      "error"
    ], // Prevent passing children as props
		'react/no-danger': [
      0
    ], // Prevent usage of dangerous JSX properties
		'react/no-danger-with-children': [
      "error"
    ], // Prevent problem with children and props.dangerouslySetInnerHTML
		'react/no-deprecated': [
      "error"
    ], // Prevent usage of deprecated methods
		'react/no-did-mount-set-state': [
      "error"
    ], // Prevent usage of setState in componentDidMount
		'react/no-did-update-set-state': [
      "error"
    ], // Prevent usage of setState in componentDidUpdate
		'react/no-direct-mutation-state': [
      "error"
    ], // Prevent direct mutation of this.state
		'react/no-find-dom-node': [
      "error"
    ], // Prevent usage of findDOMNode
		'react/no-is-mounted': [
      "error"
    ], // Prevent usage of isMounted
		'react/no-multi-comp': [
      "error"
    ], // Prevent multiple component definition per file
		'react/no-render-return-value': [
      "error"
    ], // Prevent usage of the return value of React.render
		'react/no-set-state': [
      0
    ], // Prevent usage of setState
		'react/no-string-refs': [
      "error"
    ], // Prevent using string references in ref attribute.
		'react/no-unescaped-entities': [
      "error"
    ], // Prevent invalid characters from appearing in markup
		'react/no-unknown-property': [
      "error"
    ], // Prevent usage of unknown DOM property (fixable)
		'react/no-unused-prop-types': [
      "error"
    ], // Prevent definitions of unused prop types
		'react/prefer-es6-class': [
      0
    ], // Enforce ES5 or ES6 class for React Components
		'react/prefer-stateless-function': [
      0
    ], // Enforce stateless React Components to be written as a pure function
		'react/prop-types': [
      0
    ], // Prevent missing props validation in a React component definition
		'react/react-in-jsx-scope': [
      "error"
    ], // Prevent missing React when using JSX
		'react/require-default-props': [
      0
    ], // Enforce a defaultProps definition for every prop that is not a required prop
		'react/require-optimization': [
      0
    ], // Enforce React components to have a shouldComponentUpdate method
		'react/require-render-return': [
      "error"
    ], // Enforce ES5 or ES6 class for returning value in render function
		'react/self-closing-comp': [
      "error"
    ], // Prevent extra closing tags for components without children (fixable)
		'react/sort-comp': [
      "error"
    ], // Enforce component methods order
		'react/sort-prop-types': [
      0
    ], // Enforce propTypes declarations alphabetical sorting
		'react/style-prop-object': [
      0
    ], // Enforce style prop value being an object
    // JSX specific
		'react/jsx-boolean-value': [
      0
    ], // Enforce boolean attributes notation in JSX (fixable)
		'react/jsx-closing-bracket-location': [
      "error"
    ], // Validate closing bracket location in JSX (fixable)
		'react/jsx-curly-spacing': [
      "error",
      "never"
    ], // Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
		'react/jsx-equals-spacing': [
      "error",
      "never"
    ], // Enforce or disallow spaces around equal signs in JSX attributes (fixable)
		'react/jsx-filename-extension': [
      0
    ], // Restrict file extensions that may contain JSX
		'react/jsx-first-prop-new-line': [
      "error",
      "multiline"
    ], // Enforce position of the first prop in JSX (fixable)
		'react/jsx-handler-names': [
      0
    ], // Enforce event handler naming conventions in JSX
		'react/jsx-indent': [
      "error",
      2
    ], // Validate JSX indentation (fixable)
		'react/jsx-indent-props': [
      "error",
      2
    ], // Validate props indentation in JSX (fixable)
		'react/jsx-key': [
      "error"
    ], // Validate JSX has key prop when in array or iterator
		'react/jsx-max-props-per-line': [
      "error",
      {
        "maximum": 6
      }
    ], // Limit maximum of props on a single line in JSX
		'react/jsx-no-bind': [
      "error"
    ], // Prevent usage of .bind() and arrow functions in JSX props
		'react/jsx-no-comment-textnodes': [
      "error"
    ], // Prevent comments from being inserted as text nodes
		'react/jsx-no-duplicate-props': [
      "error"
    ], // Prevent duplicate props in JSX
		'react/jsx-no-literals': [
      0
    ], // Prevent usage of unwrapped JSX strings
		'react/jsx-no-target-blank': [
      "error"
    ], // Prevent usage of unsafe target='_blank'
		'react/jsx-no-undef': [
      "error"
    ], // Disallow undeclared variables in JSX
		'react/jsx-pascal-case': [
      "error"
    ], // Enforce PascalCase for user-defined JSX components
		'react/jsx-sort-props': [
      0
    ], // Enforce props alphabetical sorting
		'react/jsx-tag-spacing': [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never"
      }
    ], // Validate whitespace in and around the JSX opening and closing brackets (fixable)
		'react/jsx-uses-react': [
      "error"
    ], // Prevent React to be incorrectly marked as unused
		'react/jsx-uses-vars': [
      "error"
    ], // Prevent variables used in JSX to be incorrectly marked as unused
		'react/jsx-wrap-multilines': [
      "error"
    ] // Prevent missing parentheses around multilines JSX (fixable)
  }
}
